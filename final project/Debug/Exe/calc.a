;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : calc
;Version :
;Date    : 1/30/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;// DB0 - PORTA Bit 0
;// DB1 - PORTA Bit 1
;// DB2 - PORTA Bit 2
;// DB3 - PORTA Bit 3
;// DB4 - PORTA Bit 4
;// DB5 - PORTA Bit 5
;// DB6 - PORTA Bit 6
;// DB7 - PORTA Bit 7
;// E - PORTB Bit 0
;// RD /WR - PORTB Bit 1
;// RS - PORTB Bit 2
;// /RST - PORTB Bit 3
;// CS1 - PORTB Bit 4
;// CS2 - PORTB Bit 5
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <glcd.h>
;#include <font5x7.h>
;#include <ctype.h>
;#include <delay.h>
;#include <math.h>
;#include <stdbool.h>
;#include "stdio.h"
;
;const char digits[]="0123456789";
;int number_of_input=0;
;char res;
;int table[2][4];
;int index_number_1=0;
;int index_number_2=0;
;int number1;
;int number2;
;int resault;
;int cursor=10;

	.DSEG
;int operation=4;
;int ten;
;int i=0;
;int j=0;
;int nDigits=0;
;int temp_number=0;
;bool is_True=true;
;
;int countDigit(long n)
; 0000 0042 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0043     int count = 0;
; 0000 0044     while (n != 0) {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	n -> Y+2
;	count -> R16,R17
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0045         n = n / 10;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0046         ++count;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0047     }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0048     return count;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0049 }
;PCODE: $00000027 VOL: 0
;int getdigit(int num_t, int n)
; 0000 004B {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004C     int r=0;
; 0000 004D     int t1=0;
; 0000 004E     int t2=0;
; 0000 004F 
; 0000 0050     t1 = pow(10, n+1);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;	num_t -> Y+8
;	n -> Y+6
;	r -> R16,R17
;	t1 -> R18,R19
;	t2 -> R20,R21
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0051     r = num_t % t1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0052 
; 0000 0053     if (n > 0)
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0054     {
; 0000 0055         t2 = pow(10, n);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0056         r = r / t2;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0057     }
; 0000 0058 
; 0000 0059     return r;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005A }
;PCODE: $00000053 VOL: 0
;int getMyDigit(int mynumber,int k){
; 0000 005B int getMyDigit(int mynumber,int k){
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005C     return (int)floor((mynumber/pow(10,k)))%10;
;PCODE: $00000056 VOL: 0
;	mynumber -> Y+2
;	k -> Y+0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005D 
; 0000 005E 
; 0000 005F }
;PCODE: $00000068 VOL: 0
;void reset(){
; 0000 0060 void reset(){
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0061     number_of_input=0;
;PCODE: $0000006B VOL: 0
; 0000 0062     index_number_1=0;
;PCODE: $0000006C VOL: 0
; 0000 0063     index_number_2=0;
;PCODE: $0000006D VOL: 0
; 0000 0064     cursor=10;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0065     operation=4;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0066     i=0;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0067     j=0;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0068     number1=0;
;PCODE: $00000076 VOL: 0
; 0000 0069     number2=0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 006A     resault=0;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 006B     ten=0;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 006C     nDigits=0;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 006D     temp_number=0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 006E     for(i=0;i<2;i++){
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006F         for(j=0;j<4;j++){
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0070             table[i][j]=0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0071         }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0072     }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0073 }
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;char int_to_char(int num){
; 0000 0074 char int_to_char(int num){
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0075     return digits[num%10];
;PCODE: $000000B2 VOL: 0
;	num -> Y+0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0076 
; 0000 0077 }
;PCODE: $000000BA VOL: 0
;void config_GLCD(){
; 0000 0078 void config_GLCD(){
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0079         GLCDINIT_t glcd_init_data;
; 0000 007A         glcd_init_data.font=font5x7;
;PCODE: $000000BD VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 007B         glcd_init_data.readxmem=NULL;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 007C         glcd_init_data.writexmem=NULL;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 007D         glcd_init(&glcd_init_data);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 007E }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;void config_port(){
; 0000 007F void config_port(){
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0080     DDRC = 0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0081     PORTC = 0xFF;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0082     DDRD = 0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0083     PORTD = 0xFF;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0084 }
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;void show_number(int number){
; 0000 0085 void show_number(int number){
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0086     switch(number_of_input)
;PCODE: $000000D7 VOL: 0
;	number -> Y+0
;PCODE: $000000D8 VOL: 0
; 0000 0087     {
; 0000 0088         case 0:{
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0089             table[0][index_number_1]=number;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 008A             sprintf("a")
; 0000 008B             index_number_1=index_number_1+1;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 008C             res=int_to_char(number);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 008D             glcd_putcharxy(cursor,10,res);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 008E             cursor=cursor+10;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 008F             break;
;PCODE: $000000F7 VOL: 0
; 0000 0090         }
; 0000 0091         case 1:{
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0092             table[1][index_number_2]=number;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0093             index_number_2=index_number_2+1;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0094             res=int_to_char(number);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0095             glcd_putcharxy(cursor,10,res);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0096             cursor=cursor+10;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0097             break;
;PCODE: $00000111 VOL: 0
; 0000 0098         }
; 0000 0099     }
;PCODE: $00000112 VOL: 0
; 0000 009A }
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0

	.DSEG
_0x13:
	.BYTE 0x2
;void show_error(){
; 0000 009B void show_error(){

	.CSEG
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 009C     glcd_clear();
;PCODE: $00000118 VOL: 0
; 0000 009D     reset();
;PCODE: $00000119 VOL: 0
; 0000 009E     glcd_outtextxyf(10,10,"Error");
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 009F     is_True=false;
;PCODE: $00000121 VOL: 0
; 0000 00A0 }
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;void show_operation(int number_of_operation){
; 0000 00A1 void show_operation(int number_of_operation){
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00A2     operation=number_of_operation;
;PCODE: $00000126 VOL: 0
;	number_of_operation -> Y+0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00A3     number_of_input=number_of_input+1;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00A4     if(number_of_input==2){
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00A5          show_error();
;PCODE: $0000012F VOL: 0
; 0000 00A6     }
; 0000 00A7     else{
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00A8          switch(number_of_operation){
;PCODE: $00000132 VOL: 0
; 0000 00A9         case 0: glcd_outtextxyf(cursor,10,"+");cursor=cursor+10;break;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00AA         case 1: glcd_outtextxyf(cursor,10,"-");cursor=cursor+10;break;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00AB         case 2: glcd_outtextxyf(cursor,10,"*");cursor=cursor+10;break;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00AC         case 3: glcd_outtextxyf(cursor,10,"/");cursor=cursor+10;break;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00AD     }
;PCODE: $0000016A VOL: 0
; 0000 00AE     }
;PCODE: $0000016B VOL: 0
; 0000 00AF 
; 0000 00B0 
; 0000 00B1 }
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;void calculate_and_reset_data(){
; 0000 00B2 void calculate_and_reset_data(){
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00B3 if(number_of_input!=1){
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00B4     show_error();
;PCODE: $00000174 VOL: 0
; 0000 00B5 }
; 0000 00B6 else{
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00B7 
; 0000 00B8 
; 0000 00B9     int mouse=10;
; 0000 00BA     glcd_clear();
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;	mouse -> Y+0
;PCODE: $0000017C VOL: 0
; 0000 00BB     number1=0;
;PCODE: $0000017D VOL: 0
; 0000 00BC     number2=0;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00BD     resault=0;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00BE     for(i=0;i<index_number_1;i++){
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00BF         ten=pow(10,index_number_1 -1 -i);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00C0         number1=number1+(table[0][i]*ten);
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00C1     }
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00C2     for(i=0;i<index_number_2;i++){
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00C3         ten=pow(10,index_number_2 -1 -i);
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 00C4         number2=number2+(table[1][i]*ten);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00C5     }
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 00C6     switch(operation){
;PCODE: $000001D2 VOL: 0
; 0000 00C7         case 0 :
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00C8             resault=number1+number2;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 00C9             break;
;PCODE: $000001D8 VOL: 0
; 0000 00CA         case 1:
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 00CB             resault=number1-number2;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 00CC             break;
;PCODE: $000001E0 VOL: 0
; 0000 00CD         case 2:
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00CE             resault=number1*number2;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00CF             break;
;PCODE: $000001E8 VOL: 0
; 0000 00D0         case 3:
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00D1             resault=number1/number2;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 00D2             break;
;PCODE: $000001F0 VOL: 0
; 0000 00D3     }
;PCODE: $000001F1 VOL: 0
; 0000 00D4     nDigits=countDigit(resault);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 00D5 
; 0000 00D6     for (i=0;i<nDigits;i++){
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 00D7           temp_number=getMyDigit(resault,nDigits-1-i);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 00D8           res=int_to_char(temp_number);
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 00D9           glcd_putcharxy(mouse,10,res);
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 00DA           mouse=mouse+10;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 00DB     }
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 00DC     reset();
;PCODE: $0000021D VOL: 0
; 0000 00DD     is_True=false;
;PCODE: $0000021E VOL: 0
; 0000 00DE 
; 0000 00DF 
; 0000 00E0 
; 0000 00E1 }
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 00E2 
; 0000 00E3 }
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;void newInput(int input1,int input2){
; 0000 00E4 void newInput(int input1,int input2){
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 00E5     if(input1==0b01111111){             //*
;PCODE: $00000225 VOL: 0
;	input1 -> Y+2
;	input2 -> Y+0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 00E6         show_operation(2);
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 00E7     }
; 0000 00E8     if(input1==0b10111111){             //6
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 00E9         show_number(6);
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 00EA     }
; 0000 00EB     if(input1==0b11011111){             //5
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 00EC         show_number(5);
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 00ED     }
; 0000 00EE     if(input1==0b11101111){             //4
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 00EF         show_number(4);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 00F0     }
; 0000 00F1     if(input1==0b11110111){             //   /
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 00F2         show_operation(3);
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 00F3 
; 0000 00F4     }
; 0000 00F5     if(input1==0b11111011){             //9
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 00F6         show_number(9);
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 00F7     }
; 0000 00F8     if(input1==0b11111101){             //8
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 00F9         show_number(8);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 00FA     }
; 0000 00FB     if(input1==0b11111110){             //7
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 00FC         show_number(7);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 00FD     }
; 0000 00FE     //*******************************************************
; 0000 00FF 
; 0000 0100     if(input2==0b01111111){             //+
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 0101         show_operation(0);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0102     }
; 0000 0103     if(input2==0b10111111){             //=
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0104 
; 0000 0105     }
; 0000 0106     if(input2==0b11011111){             //0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0107         show_number(0);
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0108     }
; 0000 0109     if(input2==0b11101111){             //reset
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 010A         glcd_clear();
;PCODE: $00000273 VOL: 0
; 0000 010B     }
; 0000 010C     if(input2==0b11110111){             //-
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 010D         show_operation(1);
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 010E     }
; 0000 010F     if(input2==0b11111011){             //3
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0110         show_number(3);
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0111     }
; 0000 0112     if(input2==0b11111101){             //2
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 0113         show_number(2);
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0114     }
; 0000 0115     if(input2==0b11111110){             //1
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 0116         show_number(1);
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 0117     }
; 0000 0118 }
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;void main(void)
; 0000 011A {
;PCODE: $00000294 VOL: 0
; 0000 011B int input1=0;
; 0000 011C int input2=0;
; 0000 011D config_GLCD();
;	input1 -> R16,R17
;	input2 -> R18,R19
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 011E config_port();
;PCODE: $0000029A VOL: 0
; 0000 011F while (1)
;PCODE: $0000029B VOL: 0
; 0000 0120       {
; 0000 0121       while(1){
;PCODE: $0000029C VOL: 0
; 0000 0122 
; 0000 0123             input1=PINC;
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0124             input2=PIND;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 0125             if(input1!=255 || input2 !=255){
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 0126                 if(input2==0b10111111){    //=
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 0127                     break;
;PCODE: $000002AE VOL: 0
; 0000 0128                 }
; 0000 0129                 if (!is_True){       //opt like +,-,*,/
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 012A                     glcd_clear();
;PCODE: $000002B2 VOL: 0
; 0000 012B                     is_True=true;
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 012C                 }
; 0000 012D                 newInput(input1,input2);
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 012E 
; 0000 012F         }
; 0000 0130         delay_ms(30);
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 0131 
; 0000 0132       }
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 0133       calculate_and_reset_data();
;PCODE: $000002BF VOL: 0
; 0000 0134 
; 0000 0135 
; 0000 0136       }
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 0137 }
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
